import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

import numpy as np
from Localization.audioSim import Mic, Source, Environment, getRandomEnv, getEstTDOA, getTrueTDOA

class DenoisingAutoencoder:
    def __init__(self, input_dim, hidden1_dim=10, hidden2_dim=5, alpha=0.01):
        rng = np.random.default_rng()
        self.alpha = alpha
        self.W1 = rng.standard_normal((input_dim, hidden1_dim)) * 0.1
        self.b1 = np.zeros(hidden1_dim)
        self.W2 = rng.standard_normal((hidden1_dim, hidden2_dim)) * 0.1
        self.b2 = np.zeros(hidden2_dim)
        self.W3 = rng.standard_normal((hidden2_dim, input_dim)) * 0.1
        self.b3 = np.zeros(input_dim)

    def _leaky_relu(self, x):
        return np.where(x > 0, x, self.alpha * x)

    def _leaky_relu_deriv(self, x):
        return np.where(x > 0, 1.0, self.alpha)

    def forward(self, X):
        H1_lin = np.dot(X, self.W1) + self.b1
        H1 = self._leaky_relu(H1_lin)
        H2_lin = np.dot(H1, self.W2) + self.b2
        H2 = self._leaky_relu(H2_lin)
        Y_pred = np.dot(H2, self.W3) + self.b3
        return Y_pred

    def train(self, X_pred, Y_true, epochs, lr=0.01):
        N = X_pred.shape[0]
        for epoch in range(epochs):
            H1_lin = np.dot(X_pred, self.W1) + self.b1
            H1 = self._leaky_relu(H1_lin)
            H2_lin = np.dot(H1, self.W2) + self.b2
            H2 = self._leaky_relu(H2_lin)
            Y_pred = np.dot(H2, self.W3) + self.b3

            error = Y_pred - Y_true
            loss = np.mean(error ** 2)

            grad_Y = (2.0 / N) * error
            dW3 = np.dot(H2.T, grad_Y)
            db3 = np.sum(grad_Y, axis=0)

            grad_H2 = np.dot(grad_Y, self.W3.T) * self._leaky_relu_deriv(H2_lin)
            dW2 = np.dot(H1.T, grad_H2)
            db2 = np.sum(grad_H2, axis=0)

            grad_H1 = np.dot(grad_H2, self.W2.T) * self._leaky_relu_deriv(H1_lin)
            dW1 = np.dot(X_pred.T, grad_H1)
            db1 = np.sum(grad_H1, axis=0)

            self.W3 -= lr * dW3
            self.b3 -= lr * db3
            self.W2 -= lr * dW2
            self.b2 -= lr * db2
            self.W1 -= lr * dW1
            self.b1 -= lr * db1

            if (epoch + 1) % 100 == 0 or epoch == epochs - 1:
                print(f"Epoch {epoch+1}/{epochs}, Loss: {loss:.20f}")

    def test(self, X, Y):
        Y_pred = self.forward(X)
        loss = np.mean((Y_pred - Y) ** 2)
        print(f"Testing loss: {loss:.20f}")


if __name__ == "__main__":
    mic_positions = [(0,0), (0.045,0), (0.0225,0.078)]
    mics = [Mic(pos) for pos in mic_positions]
    input_dim = len(mics) - 1  

    N = 100000
    training_N = int(0.8*N)
    testing_N = N-training_N
    X_train_pred = np.zeros((training_N, input_dim))
    Y_train_true = np.zeros((training_N, input_dim))

    for i in range(training_N):
        env = getRandomEnv(mics, maxRad=1000)  
        env.runSim()  
        base = env.getMics()[0]
        for j in range(input_dim):
            other = env.getMics()[j+1]
            X_train_pred[i, j] = getEstTDOA(base, other)
            Y_train_true[i, j] = getTrueTDOA(base, other, env.getSource())
            
    
    dae = DenoisingAutoencoder(input_dim, 5)
    dae.train(X_train_pred, Y_train_true, epochs=500, lr=0.01)

    X_test = np.zeros((testing_N, input_dim))
    Y_test = np.zeros((testing_N, input_dim))
    
    for i in range(testing_N):
          
        env.runSim()  
        
        for j in range(input_dim):
            other = env.getMics()[j+1]
            X_train_pred[i, j] = getEstTDOA(base, other)
            Y_train_true[i, j] = getTrueTDOA(base, other, env.getSource())
            
    dae.test(X_test, Y_test)



